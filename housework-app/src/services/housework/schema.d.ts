/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/auth/session": {
    /** Get Session */
    get: operations["hwk_apps_api_v1_auth_get_session"];
    /** Login User */
    post: operations["hwk_apps_api_v1_auth_login_user"];
    /** Logout User */
    delete: operations["hwk_apps_api_v1_auth_logout_user"];
  };
  "/api/v1/auth/otp/send": {
    /** Send Otp */
    post: operations["hwk_apps_api_v1_auth_send_otp"];
  };
  "/api/v1/auth/otp/respond": {
    /** Respond Otp */
    post: operations["hwk_apps_api_v1_auth_respond_otp"];
  };
  "/api/v1/people/users/": {
    /** Get Users */
    get: operations["hwk_apps_api_v1_people_get_users"];
  };
  "/api/v1/people/users/self/": {
    /** Get Current User */
    get: operations["hwk_apps_api_v1_people_get_current_user"];
    /** Update User */
    patch: operations["hwk_apps_api_v1_people_update_user"];
  };
  "/api/v1/people/users/self/preferences": {
    /** Set Current User Preferences */
    put: operations["hwk_apps_api_v1_people_set_current_user_preferences"];
  };
  "/api/v1/people/users/{username}/approve": {
    /** Approve User */
    post: operations["hwk_apps_api_v1_people_approve_user"];
  };
  "/api/v1/people/users/self/password": {
    /** Change Password */
    post: operations["hwk_apps_api_v1_people_change_password"];
  };
  "/api/v1/teams/": {
    /** Get Teams */
    get: operations["hwk_apps_api_v1_team_get_teams"];
    /** Create Team */
    post: operations["hwk_apps_api_v1_team_create_team"];
  };
  "/api/v1/teams/{team_id}/": {
    /** Update Team */
    patch: operations["hwk_apps_api_v1_team_update_team"];
  };
  "/api/v1/teams/{team_id}/members/{username}": {
    /** Add Member */
    post: operations["hwk_apps_api_v1_team_add_member"];
    /** Remove Member */
    delete: operations["hwk_apps_api_v1_team_remove_member"];
  };
  "/api/v1/teams/invitations": {
    /** Get Invitations */
    get: operations["hwk_apps_api_v1_team_get_invitations"];
  };
  "/api/v1/teams/invitations/{invitation_id}/{action}": {
    /** Respond Invitation */
    post: operations["hwk_apps_api_v1_team_respond_invitation"];
  };
  "/api/v1/teams/{team_id}/jobconfigs/": {
    /** List Jobconfigs */
    get: operations["hwk_apps_api_v1_job_configs_list_jobconfigs"];
    /** Create Jobconfig */
    post: operations["hwk_apps_api_v1_job_configs_create_jobconfig"];
  };
  "/api/v1/teams/{team_id}/jobconfigs/{jobconfig_id}/": {
    /** Get Jobconfig */
    get: operations["hwk_apps_api_v1_job_configs_get_jobconfig"];
    /** Delete Jobconfig */
    delete: operations["hwk_apps_api_v1_job_configs_delete_jobconfig"];
    /** Patch Jobconfig */
    patch: operations["hwk_apps_api_v1_job_configs_patch_jobconfig"];
  };
  "/api/v1/teams/{team_id}/jobconfigs/{job_config_id}/variants/": {
    /** List Jobconfig Variants */
    get: operations["hwk_apps_api_v1_job_variants_list_jobconfig_variants"];
    /** Create Jobconfig Variant */
    post: operations["hwk_apps_api_v1_job_variants_create_jobconfig_variant"];
  };
  "/api/v1/teams/{team_id}/jobconfigs/{job_config_id}/variants/{variant_id}/": {
    /** Get Jobvariant */
    get: operations["hwk_apps_api_v1_job_variants_get_jobvariant"];
    /** Delete Jobvariant */
    delete: operations["hwk_apps_api_v1_job_variants_delete_jobvariant"];
  };
  "/api/v1/teams/{team_id}/triggers/": {
    /** Get Triggers */
    get: operations["hwk_apps_api_v1_job_triggers_get_triggers"];
    /** Create Trigger */
    post: operations["hwk_apps_api_v1_job_triggers_create_trigger"];
  };
  "/api/v1/teams/{team_id}/triggers/{trigger_id}": {
    /** Delete Trigger */
    delete: operations["hwk_apps_api_v1_job_triggers_delete_trigger"];
    /** Update Trigger */
    patch: operations["hwk_apps_api_v1_job_triggers_update_trigger"];
  };
  "/api/v1/teams/{team_id}/triggers/{trigger_id}/rules": {
    /** Add Rule To Trigger */
    post: operations["hwk_apps_api_v1_job_triggers_add_rule_to_trigger"];
  };
  "/api/v1/teams/{team_id}/triggers/{trigger_id}/rules/{rule_id}/": {
    /** Delete Rule */
    delete: operations["hwk_apps_api_v1_job_triggers_delete_rule"];
    /** Update Rule */
    patch: operations["hwk_apps_api_v1_job_triggers_update_rule"];
  };
  "/api/v1/jobs/{job_id}": {
    /** Get Job */
    get: operations["hwk_apps_api_v1_job_get_job"];
  };
  "/api/v1/jobs/": {
    /** Get Jobs */
    get: operations["hwk_apps_api_v1_job_get_jobs"];
    /** Create Job */
    post: operations["hwk_apps_api_v1_job_create_job"];
  };
  "/api/v1/jobs/from/{config_id}": {
    /** Create Job From Config */
    post: operations["hwk_apps_api_v1_job_create_job_from_config"];
  };
  "/api/v1/jobs/{job_id}/status/{status}": {
    /** Close Job */
    post: operations["hwk_apps_api_v1_job_close_job"];
  };
  "/api/v1/jobs/{job_id}/dry_run/{action}": {
    /** Dry Run Job */
    get: operations["hwk_apps_api_v1_job_dry_run_job"];
  };
  "/api/v1/notifications/unread": {
    /** Get Unread */
    get: operations["hwk_apps_api_v1_notification_get_unread"];
  };
  "/api/v1/notifications/subscribe": {
    /** Subscribe */
    post: operations["hwk_apps_api_v1_notification_subscribe"];
  };
  "/api/v1/notifications/all/read": {
    /** Mark All Read */
    post: operations["hwk_apps_api_v1_notification_mark_all_read"];
  };
  "/api/v1/notifications/{notification_id}/read": {
    /** Mark Read */
    post: operations["hwk_apps_api_v1_notification_mark_read"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** LoginSchema */
    LoginSchema: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** OTPSendRequest */
    OTPSendRequest: {
      /**
       * Sub
       * Format: email
       */
      sub: string;
    };
    /** OTPRespondRequest */
    OTPRespondRequest: {
      /** Code */
      code: string;
    };
    /** UserListSchema */
    UserListSchema: {
      /** Username */
      username: string;
      /** Full Name */
      full_name?: string;
      /** Short Name */
      short_name?: string;
      /** Email */
      email?: string;
      /** Approved */
      approved: boolean;
    };
    /** PagedUserListSchema */
    PagedUserListSchema: {
      /** Items */
      items: components["schemas"]["UserListSchema"][];
      /** Count */
      count: number;
    };
    /** UserResponseSchema */
    UserResponseSchema: {
      /** Full Name */
      full_name?: string;
      /** Short Name */
      short_name?: string;
      /** Email Address */
      email?: string;
      /** Has Usable Password */
      has_usable_password: boolean;
    };
    /** UserEditSchema */
    UserEditSchema: {
      /** Full Name */
      full_name?: string;
      /** Short Name */
      short_name?: string;
      /** Password */
      password?: string;
    };
    /** TeamSelfSchema */
    TeamSelfSchema: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /** Name */
      name: string;
      /** Policy When On Holiday */
      policy_when_on_holiday: string;
      /**
       * Policy Overdue Inflation
       * @description Multiplier applied to job if grabbed after due date
       * @default 0.05
       */
      policy_overdue_inflation?: number;
      /**
       * Policy Max Team Diff
       * @description Maximum relative credit in team to consider for job assigner
       * @default 600
       */
      policy_max_team_diff?: number;
      /**
       * Policy Max Job Diff
       * @description Maximum relative credit on a job to consider for job assigner
       * @default 120
       */
      policy_max_job_diff?: number;
      /**
       * Policy Team Credit Weight
       * @description Weight given to relative credit within the team
       */
      policy_team_credit_weight: number;
      /**
       * Policy Job Credit Weight
       * @description Weight given to relative credit on each job
       */
      policy_job_credit_weight: number;
      /**
       * Policy Random Weight
       * @description Random weighting
       */
      policy_random_weight: number;
    };
    /** MembershipSelfSchema */
    MembershipSelfSchema: {
      team: components["schemas"]["TeamSelfSchema"];
      /** Role */
      role: string;
    };
    /** UserSelfSchema */
    UserSelfSchema: {
      /** ID */
      id?: number;
      /**
       * Username
       * @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
       */
      username: string;
      /**
       * Approved
       * @default false
       */
      approved?: boolean;
      /** Full Name */
      full_name?: string;
      /** Short Name */
      short_name?: string;
      /**
       * Superuser Status
       * @description Designates that this user has all permissions without explicitly assigning them.
       * @default false
       */
      is_superuser?: boolean;
      /**
       * Date Joined
       * Format: date-time
       */
      date_joined?: string;
      /** Preferences */
      preferences?: Record<string, never>;
      /** Memberships */
      memberships: components["schemas"]["MembershipSelfSchema"][];
      /** Is Set Up */
      is_set_up: boolean;
      /** Has Usable Password */
      has_usable_password: boolean;
    };
    /** ActionResponse */
    ActionResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
    };
    /** PasswordChangeModel */
    PasswordChangeModel: {
      /** Current Password */
      current_password: string;
      /** New Password */
      new_password: string;
    };
    /** ErrorResponse */
    ErrorResponse: {
      /**
       * Success
       * @enum {boolean}
       */
      success: false;
      /** Message */
      message: string;
    };
    /** UserSchema */
    UserSchema: {
      /** ID */
      id?: number;
      /**
       * Username
       * @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
       */
      username: string;
      /**
       * Approved
       * @default false
       */
      approved?: boolean;
      /** Full Name */
      full_name?: string;
      /** Short Name */
      short_name?: string;
      /**
       * Superuser Status
       * @description Designates that this user has all permissions without explicitly assigning them.
       * @default false
       */
      is_superuser?: boolean;
      /**
       * Date Joined
       * Format: date-time
       */
      date_joined?: string;
    };
    /** MembershipSchema */
    MembershipSchema: {
      /** ID */
      id?: number;
      user: components["schemas"]["UserSchema"];
      /**
       * Team
       * Format: uuid
       */
      team: string;
      /** Role */
      role: string;
    };
    /** TeamResponse */
    TeamResponse: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /** Name */
      name: string;
      /** Policy When On Holiday */
      policy_when_on_holiday: string;
      /**
       * Policy Overdue Inflation
       * @description Multiplier applied to job if grabbed after due date
       * @default 0.05
       */
      policy_overdue_inflation?: number;
      /**
       * Policy Max Team Diff
       * @description Maximum relative credit in team to consider for job assigner
       * @default 600
       */
      policy_max_team_diff?: number;
      /**
       * Policy Max Job Diff
       * @description Maximum relative credit on a job to consider for job assigner
       * @default 120
       */
      policy_max_job_diff?: number;
      /**
       * Policy Team Credit Weight
       * @description Weight given to relative credit within the team
       */
      policy_team_credit_weight: number;
      /**
       * Policy Job Credit Weight
       * @description Weight given to relative credit on each job
       */
      policy_job_credit_weight: number;
      /**
       * Policy Random Weight
       * @description Random weighting
       */
      policy_random_weight: number;
      /** Memberships */
      memberships: components["schemas"]["MembershipSchema"][];
    };
    /**
     * HolidayPolicy
     * @description An enumeration.
     * @enum {string}
     */
    HolidayPolicy: "FIND_OTHER" | "WHEN_BACK";
    /** TeamCreateSchema */
    TeamCreateSchema: {
      /** Name */
      name: string;
      policy_when_on_holiday: components["schemas"]["HolidayPolicy"];
      /** Policy Max Team Diff */
      policy_max_team_diff: number;
      /** Policy Max Job Diff */
      policy_max_job_diff: number;
      /** Policy Team Credit Weight */
      policy_team_credit_weight: number;
      /** Policy Job Credit Weight */
      policy_job_credit_weight: number;
      /** Policy Random Weight */
      policy_random_weight: number;
    };
    /** TeamUpdateSchema */
    TeamUpdateSchema: {
      /** Name */
      name?: string;
      policy_when_on_holiday?: components["schemas"]["HolidayPolicy"];
      /** Policy Max Team Diff */
      policy_max_team_diff?: number;
      /** Policy Max Job Diff */
      policy_max_job_diff?: number;
      /** Policy Team Credit Weight */
      policy_team_credit_weight?: number;
      /** Policy Job Credit Weight */
      policy_job_credit_weight?: number;
      /** Policy Random Weight */
      policy_random_weight?: number;
    };
    /**
     * MembershipRole
     * @description An enumeration.
     * @enum {string}
     */
    MembershipRole: "Member" | "Admin";
    /** MemberManagementSchema */
    MemberManagementSchema: {
      role: components["schemas"]["MembershipRole"];
    };
    /** InvitationSchema */
    InvitationSchema: {
      /** ID */
      id?: number;
      /** Email */
      email: string;
      issuer: components["schemas"]["UserSchema"];
      team: components["schemas"]["TeamResponse"];
      /** Role */
      role: string;
      /**
       * Expires
       * Format: date-time
       */
      expires: string;
      /**
       * Declined
       * @default false
       */
      declined?: boolean;
    };
    /** JobVariantSchema */
    JobVariantSchema: {
      /** ID */
      id?: number;
      /** Job Config */
      job_config: number;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Credit */
      credit: number;
    };
    /** JobScheduleRuleSchema */
    JobScheduleRuleSchema: {
      /** ID */
      id?: number;
      /** Trigger */
      trigger: number;
      /** Rule Type */
      rule_type: string;
      /** Params */
      params: Record<string, never>;
      /** Summary */
      summary: string;
    };
    /** JobTriggerSchema */
    JobTriggerSchema: {
      /** ID */
      id?: number;
      /** From Config */
      from_config: number;
      /** Create Config */
      create_config: number;
      /**
       * Existing Job
       * @default REPLACE
       */
      existing_job?: string;
      /**
       * Lifecycle Scheduled
       * @default false
       */
      lifecycle_scheduled?: boolean;
      /**
       * Lifecycle Open
       * @default false
       */
      lifecycle_open?: boolean;
      /**
       * Lifecycle Overdue
       * @default false
       */
      lifecycle_overdue?: boolean;
      /**
       * Lifecycle Complete
       * @default false
       */
      lifecycle_complete?: boolean;
      /**
       * Lifecycle Cancelled
       * @default false
       */
      lifecycle_cancelled?: boolean;
      /**
       * Urgent
       * @default false
       */
      urgent?: boolean;
      /** Rules */
      rules: components["schemas"]["JobScheduleRuleSchema"][];
    };
    /** JobConfigSchema */
    JobConfigSchema: {
      /** ID */
      id?: number;
      /**
       * Team
       * Format: uuid
       */
      team: string;
      /** Name */
      name: string;
      /** Description */
      description?: string;
      /** Default Credit */
      default_credit: number;
      /**
       * Active
       * @default true
       */
      active?: boolean;
      /** Open Days */
      open_days?: number;
      /** Failed Days */
      failed_days?: number;
      /** Variants */
      variants: components["schemas"]["JobVariantSchema"][];
      /** Trigger From */
      trigger_from: components["schemas"]["JobTriggerSchema"][];
      /** Trigger Create */
      trigger_create: components["schemas"]["JobTriggerSchema"][];
    };
    /** JobConfigCreateSchema */
    JobConfigCreateSchema: {
      /** Name */
      name: string;
      /** Description */
      description?: string;
      /** Default Credit */
      default_credit: number;
      /**
       * Active
       * @default true
       */
      active?: boolean;
      /** Open Days */
      open_days?: number;
      /** Failed Days */
      failed_days?: number;
    };
    /** PagedJobConfigSchema */
    PagedJobConfigSchema: {
      /** Items */
      items: components["schemas"]["JobConfigSchema"][];
      /** Count */
      count: number;
    };
    /** JobConfigUpdateSchema */
    JobConfigUpdateSchema: {
      /**
       * Team
       * Format: uuid
       */
      team_id?: string;
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Default Credit */
      default_credit?: number;
      /**
       * Active
       * @default true
       */
      active?: boolean;
      /** Open Days */
      open_days?: number;
      /** Failed Days */
      failed_days?: number;
    };
    /** PagedJobVariantSchema */
    PagedJobVariantSchema: {
      /** Items */
      items: components["schemas"]["JobVariantSchema"][];
      /** Count */
      count: number;
    };
    /** JobVariantCreateSchema */
    JobVariantCreateSchema: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Credit */
      credit: number;
    };
    /** JobTriggerCreateSchema */
    JobTriggerCreateSchema: {
      /** From Config */
      from_config_id: number;
      /** Create Config */
      create_config_id: number;
      /**
       * Existing Job
       * @default REPLACE
       */
      existing_job?: string;
      /**
       * Lifecycle Scheduled
       * @default false
       */
      lifecycle_scheduled?: boolean;
      /**
       * Lifecycle Open
       * @default false
       */
      lifecycle_open?: boolean;
      /**
       * Lifecycle Overdue
       * @default false
       */
      lifecycle_overdue?: boolean;
      /**
       * Lifecycle Complete
       * @default false
       */
      lifecycle_complete?: boolean;
      /**
       * Lifecycle Cancelled
       * @default false
       */
      lifecycle_cancelled?: boolean;
      /**
       * Urgent
       * @default false
       */
      urgent?: boolean;
    };
    /** JobTriggerUpdateSchema */
    JobTriggerUpdateSchema: {
      /** From Config */
      from_config?: number;
      /** Create Config */
      create_config?: number;
      /** Urgent */
      urgent?: boolean;
      /** Lifecycle Scheduled */
      lifecycle_scheduled?: boolean;
      /** Lifecycle Open */
      lifecycle_open?: boolean;
      /** Lifecycle Overdue */
      lifecycle_overdue?: boolean;
      /** Lifecycle Complete */
      lifecycle_complete?: boolean;
      /** Lifecycle Cancelled */
      lifecycle_cancelled?: boolean;
    };
    /** JobScheduleRuleCreateSchema */
    JobScheduleRuleCreateSchema: {
      /** Rule Type */
      rule_type: string;
      /** Params */
      params: Record<string, never>;
    };
    /** JobScheduleRuleUpdateSchema */
    JobScheduleRuleUpdateSchema: {
      /** Params */
      params: Record<string, never>;
    };
    /** CreditSchema */
    CreditSchema: {
      /** ID */
      id?: number;
      /** Amount */
      amount: number;
      /** Job */
      job: number;
      person: components["schemas"]["MembershipSchema"];
    };
    /** JobDetailSchema */
    JobDetailSchema: {
      /** ID */
      id?: number;
      job_config?: components["schemas"]["JobConfigSchema"];
      team: components["schemas"]["TeamSelfSchema"];
      /** Name */
      name: string;
      /** Default Credit */
      default_credit: number;
      /** Description */
      description?: string;
      /** Explanation */
      explanation?: string;
      /**
       * Is Priority
       * @default false
       */
      is_priority?: boolean;
      /**
       * Created Date
       * Format: date-time
       */
      created_date?: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /**
       * Closed Date
       * Format: date-time
       */
      closed_date?: string;
      /**
       * Status
       * @default Scheduled
       */
      status?: string;
      assignee: components["schemas"]["MembershipSchema"];
      completed_by?: components["schemas"]["MembershipSchema"];
      /**
       * Delay
       * @default 0
       */
      delay?: number;
      /** Grabbed Rate */
      grabbed_rate: number;
      /** Credits */
      credits: components["schemas"]["CreditSchema"][];
    };
    /** JobSchema */
    JobSchema: {
      /** ID */
      id?: number;
      /** Job Config */
      job_config?: number;
      /**
       * Team
       * Format: uuid
       */
      team: string;
      /** Name */
      name: string;
      /** Default Credit */
      default_credit: number;
      /** Description */
      description?: string;
      /** Explanation */
      explanation?: string;
      /**
       * Is Priority
       * @default false
       */
      is_priority?: boolean;
      /**
       * Created Date
       * Format: date-time
       */
      created_date?: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /**
       * Closed Date
       * Format: date-time
       */
      closed_date?: string;
      /**
       * Status
       * @default Scheduled
       */
      status?: string;
      /** Assignee */
      assignee: number;
      /** Completed By */
      completed_by?: number;
      /**
       * Delay
       * @default 0
       */
      delay?: number;
      /** Grabbed Rate */
      grabbed_rate: number;
    };
    /** PagedJobSchema */
    PagedJobSchema: {
      /** Items */
      items: components["schemas"]["JobSchema"][];
      /** Count */
      count: number;
    };
    /** JobCreateSchema */
    JobCreateSchema: {
      /**
       * Team
       * Format: uuid
       */
      team: string;
      /** Name */
      name: string;
      /** Default Credit */
      default_credit: number;
      /** Description */
      description?: string;
      /** Is Priority */
      is_priority: boolean;
      /**
       * Due Date
       * Format: date-time
       */
      due_date: string;
      /** Assignee */
      assignee: number;
    };
    /** JobCreateFromConfigSchema */
    JobCreateFromConfigSchema: {
      /**
       * Is Priority
       * @default false
       */
      is_priority?: boolean;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Assignee */
      assignee_id: number;
    };
    /** JobDryRunSchema */
    JobDryRunSchema: {
      created_job: components["schemas"]["JobConfigSchema"];
      /**
       * Proposed Date
       * Format: date
       */
      proposed_date: string;
      trigger: components["schemas"]["JobTriggerSchema"];
    };
    /** NotificationSchema */
    NotificationSchema: {
      /** ID */
      id?: number;
      /** Recipient */
      recipient: number;
      /** Url */
      url: string;
      /** Title */
      title: string;
      /** Body */
      body: string;
      /**
       * Date Read
       * Format: date-time
       */
      date_read?: string;
      /**
       * Date Created
       * Format: date-time
       */
      date_created?: string;
    };
    /**
     * SubscriptionChannelType
     * @description An enumeration.
     * @enum {string}
     */
    SubscriptionChannelType: "BRW_PSH";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get Session */
  hwk_apps_api_v1_auth_get_session: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Login User */
  hwk_apps_api_v1_auth_login_user: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Logout User */
  hwk_apps_api_v1_auth_logout_user: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Send Otp */
  hwk_apps_api_v1_auth_send_otp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OTPSendRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Respond Otp */
  hwk_apps_api_v1_auth_respond_otp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OTPRespondRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Get Users */
  hwk_apps_api_v1_people_get_users: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedUserListSchema"];
        };
      };
    };
  };
  /** Get Current User */
  hwk_apps_api_v1_people_get_current_user: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserSelfSchema"];
        };
      };
    };
  };
  /** Update User */
  hwk_apps_api_v1_people_update_user: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserEditSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseSchema"];
        };
      };
    };
  };
  /** Set Current User Preferences */
  hwk_apps_api_v1_people_set_current_user_preferences: {
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserSelfSchema"];
        };
      };
    };
  };
  /** Approve User */
  hwk_apps_api_v1_people_approve_user: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
    };
  };
  /** Change Password */
  hwk_apps_api_v1_people_change_password: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChangeModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ActionResponse"];
        };
      };
    };
  };
  /** Get Teams */
  hwk_apps_api_v1_team_get_teams: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"][];
        };
      };
    };
  };
  /** Create Team */
  hwk_apps_api_v1_team_create_team: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamCreateSchema"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update Team */
  hwk_apps_api_v1_team_update_team: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamUpdateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Add Member */
  hwk_apps_api_v1_team_add_member: {
    parameters: {
      path: {
        team_id: string;
        username: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberManagementSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": string;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Remove Member */
  hwk_apps_api_v1_team_remove_member: {
    parameters: {
      path: {
        team_id: string;
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": string;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get Invitations */
  hwk_apps_api_v1_team_get_invitations: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvitationSchema"][];
        };
      };
    };
  };
  /** Respond Invitation */
  hwk_apps_api_v1_team_respond_invitation: {
    parameters: {
      path: {
        invitation_id: number;
        /** @description An enumeration. */
        action: "accept" | "decline" | "block";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** List Jobconfigs */
  hwk_apps_api_v1_job_configs_list_jobconfigs: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedJobConfigSchema"];
        };
      };
    };
  };
  /** Create Jobconfig */
  hwk_apps_api_v1_job_configs_create_jobconfig: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobConfigCreateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobConfigSchema"];
        };
      };
    };
  };
  /** Get Jobconfig */
  hwk_apps_api_v1_job_configs_get_jobconfig: {
    parameters: {
      path: {
        team_id: string;
        jobconfig_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobConfigSchema"];
        };
      };
    };
  };
  /** Delete Jobconfig */
  hwk_apps_api_v1_job_configs_delete_jobconfig: {
    parameters: {
      path: {
        team_id: string;
        jobconfig_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /** Patch Jobconfig */
  hwk_apps_api_v1_job_configs_patch_jobconfig: {
    parameters: {
      path: {
        team_id: string;
        jobconfig_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobConfigUpdateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobConfigSchema"];
        };
      };
    };
  };
  /** List Jobconfig Variants */
  hwk_apps_api_v1_job_variants_list_jobconfig_variants: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      path: {
        team_id: string;
        job_config_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedJobVariantSchema"];
        };
      };
    };
  };
  /** Create Jobconfig Variant */
  hwk_apps_api_v1_job_variants_create_jobconfig_variant: {
    parameters: {
      path: {
        team_id: string;
        job_config_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobVariantCreateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobVariantSchema"];
        };
      };
    };
  };
  /** Get Jobvariant */
  hwk_apps_api_v1_job_variants_get_jobvariant: {
    parameters: {
      path: {
        team_id: string;
        job_config_id: number;
        variant_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobVariantSchema"];
        };
      };
    };
  };
  /** Delete Jobvariant */
  hwk_apps_api_v1_job_variants_delete_jobvariant: {
    parameters: {
      path: {
        team_id: string;
        job_config_id: number;
        variant_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Get Triggers */
  hwk_apps_api_v1_job_triggers_get_triggers: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobTriggerSchema"][];
        };
      };
    };
  };
  /** Create Trigger */
  hwk_apps_api_v1_job_triggers_create_trigger: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobTriggerCreateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobTriggerSchema"];
        };
      };
    };
  };
  /** Delete Trigger */
  hwk_apps_api_v1_job_triggers_delete_trigger: {
    parameters: {
      path: {
        team_id: string;
        trigger_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update Trigger */
  hwk_apps_api_v1_job_triggers_update_trigger: {
    parameters: {
      path: {
        team_id: string;
        trigger_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobTriggerUpdateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobTriggerSchema"];
        };
      };
    };
  };
  /** Add Rule To Trigger */
  hwk_apps_api_v1_job_triggers_add_rule_to_trigger: {
    parameters: {
      path: {
        team_id: string;
        trigger_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobScheduleRuleCreateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobScheduleRuleSchema"];
        };
      };
    };
  };
  /** Delete Rule */
  hwk_apps_api_v1_job_triggers_delete_rule: {
    parameters: {
      path: {
        team_id: string;
        trigger_id: number;
        rule_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobScheduleRuleUpdateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update Rule */
  hwk_apps_api_v1_job_triggers_update_rule: {
    parameters: {
      path: {
        team_id: string;
        trigger_id: number;
        rule_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobScheduleRuleUpdateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobScheduleRuleSchema"];
        };
      };
    };
  };
  /** Get Job */
  hwk_apps_api_v1_job_get_job: {
    parameters: {
      path: {
        job_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobDetailSchema"];
        };
      };
    };
  };
  /** Get Jobs */
  hwk_apps_api_v1_job_get_jobs: {
    parameters: {
      query?: {
        config_id?: number[];
        only_self?: boolean;
        team_id?: string[];
        status?: ("Scheduled" | "Open" | "Overdue" | "Complete" | "Cancelled")[];
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedJobSchema"];
        };
      };
    };
  };
  /** Create Job */
  hwk_apps_api_v1_job_create_job: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobCreateSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobSchema"];
        };
      };
    };
  };
  /** Create Job From Config */
  hwk_apps_api_v1_job_create_job_from_config: {
    parameters: {
      query?: {
        complete?: boolean;
        variant?: number;
      };
      path: {
        config_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobCreateFromConfigSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobSchema"];
        };
      };
    };
  };
  /** Close Job */
  hwk_apps_api_v1_job_close_job: {
    parameters: {
      path: {
        job_id: number;
        status: "Complete" | "Cancelled";
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Delay
           * @default 0
           */
          delay?: number;
          /** Variant */
          variant?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobSchema"];
        };
      };
    };
  };
  /** Dry Run Job */
  hwk_apps_api_v1_job_dry_run_job: {
    parameters: {
      query?: {
        delay?: number;
      };
      path: {
        job_id: number;
        /** @description An enumeration. */
        action: "Scheduled" | "Open" | "Overdue" | "Complete" | "Cancelled";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JobDryRunSchema"][];
        };
      };
    };
  };
  /** Get Unread */
  hwk_apps_api_v1_notification_get_unread: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationSchema"][];
        };
      };
    };
  };
  /** Subscribe */
  hwk_apps_api_v1_notification_subscribe: {
    requestBody: {
      content: {
        "application/json": {
          /** Enabled */
          enabled: boolean;
          /** Name */
          name: string;
          channel_type: components["schemas"]["SubscriptionChannelType"];
          /** Config */
          config: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /** Mark All Read */
  hwk_apps_api_v1_notification_mark_all_read: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /** Mark Read */
  hwk_apps_api_v1_notification_mark_read: {
    parameters: {
      path: {
        notification_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
